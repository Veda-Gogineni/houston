# -*- coding: utf-8 -*-
"""empty message

Revision ID: effd65fb089e
Revises: dc91b517a7a4
Create Date: 2024-01-05 18:24:21.360901

"""
import sqlalchemy as sa
from alembic import op

import app
import app.extensions

# revision identifiers, used by Alembic.
revision = 'effd65fb089e'
down_revision = 'dc91b517a7a4'


def upgrade():
    """
    Upgrade Semantic Description:
        ENTER DESCRIPTION HERE
    """
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('collaboration', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('export_initiator_guid', app.extensions.GUID(), nullable=True)
        )
        batch_op.add_column(
            sa.Column(
                'export_req_notification_guid', app.extensions.GUID(), nullable=True
            )
        )
        batch_op.create_index(
            batch_op.f('ix_collaboration_export_initiator_guid'),
            ['export_initiator_guid'],
            unique=False,
        )
        batch_op.create_foreign_key(
            batch_op.f('fk_collaboration_export_initiator_guid_user'),
            'user',
            ['export_initiator_guid'],
            ['guid'],
        )
        batch_op.create_foreign_key(
            batch_op.f('fk_collaboration_export_req_notification_guid_notification'),
            'notification',
            ['export_req_notification_guid'],
            ['guid'],
        )

    # we set with nullable=True since we likely have rows in this already, then toggle after
    with op.batch_alter_table('collaboration_user_associations', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('export_approval_state', sa.String(length=32), nullable=True)
        )
    # we set export_approval_state now so we can make it not-null after
    op.execute(
        "UPDATE collaboration_user_associations SET export_approval_state='not_initiated'"
    )
    # if a collab is already in the edit=approved state, we just let them get export as well
    op.execute(
        "UPDATE collaboration_user_associations SET export_approval_state='approved' WHERE edit_approval_state='approved'"
    )
    # any other state for edit just gets pushed down to export, then edit reset to not_initiated
    #   (note: yes this will move not_initiated too, but thats fine; just makes the sql simpler)
    op.execute(
        "UPDATE collaboration_user_associations SET export_approval_state=edit_approval_state WHERE edit_approval_state!='approved'"
    )
    op.execute(
        "UPDATE collaboration_user_associations SET edit_approval_state='not_initiated' WHERE edit_approval_state!='approved'"
    )
    # and here we set nullable=False once we have values in
    with op.batch_alter_table('collaboration_user_associations', schema=None) as batch_op:
        batch_op.alter_column(
            'export_approval_state', existing_type=sa.VARCHAR, nullable=False
        )

    # ### end Alembic commands ###


def downgrade():
    """
    Downgrade Semantic Description:
        ENTER DESCRIPTION HERE
    """
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('collaboration_user_associations', schema=None) as batch_op:
        batch_op.drop_column('export_approval_state')

    with op.batch_alter_table('collaboration', schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f('fk_collaboration_export_req_notification_guid_notification'),
            type_='foreignkey',
        )
        batch_op.drop_constraint(
            batch_op.f('fk_collaboration_export_initiator_guid_user'), type_='foreignkey'
        )
        batch_op.drop_index(batch_op.f('ix_collaboration_export_initiator_guid'))
        batch_op.drop_column('export_req_notification_guid')
        batch_op.drop_column('export_initiator_guid')

    # ### end Alembic commands ###
